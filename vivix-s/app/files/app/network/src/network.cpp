/*******************************************************************************
모  듈 : network interface 처리
작성자 : 홍승기
버  전 : 1.0.0
설  명 : network interfce 처리에 필요한 기능을 제공한다.
참  고 :

버  전 :
        1.0.0 최초 작성
        
*******************************************************************************/

/*******************************************************************************
    Include Files
*******************************************************************************/
#include <iostream>
#include "network.h"

using namespace std;

/*******************************************************************************
    Constant Definitions
*******************************************************************************/

/*******************************************************************************
    Type Definitions
*******************************************************************************/

/*******************************************************************************
    Macro(Inline Function) Definitions
*******************************************************************************/

/*******************************************************************************
    Variable Definitions
*******************************************************************************/

/*******************************************************************************
    Functions
*******************************************************************************/

/******************************************************************************/
/**
* \brief        constructor
* \param        none
* \return       none
* \note
*******************************************************************************/
CNetwork::CNetwork(void)
{

}

/******************************************************************************/
/**
* \brief        destructor
* \param        none
* \return       none
* \note
*******************************************************************************/
CNetwork::~CNetwork(void)
{

}

/******************************************************************************/
/**
* \brief        usleep 대신 nanosleep 사용
* \param        a_usec  micro-second 단위로 sleep 시간을 입력 받는다.
* \return       nanosleep의 반환값
* \note         instead usleep() cause system timer
*******************************************************************************/
int CNetwork::network_usleep( s64 a_nusec )
{
	struct timespec req, rem;
	int rtn;

	req.tv_sec = a_nusec / 1000000;
	req.tv_nsec = ( a_nusec % 1000000 ) * 1000;

	do
    {
    	rtn = nanosleep( & req, & rem );

    	if( rtn < 0 && errno == EINTR )
        {
        	req = rem;
        }
    }
	while( rtn < 0 && errno == EINTR );

	return rtn;
}

/******************************************************************************/
/**
* \brief        디버그용 packet 출력 함수
* \param        a_packet    출력할 packet 메모리
* \param        a_len       출력할 packet 메모리의 길이
* \return       none
* \note
*******************************************************************************/
void CNetwork::network_print_packet( u8 * a_ppacket, int a_nlen )
{
	u8		i, j;
	u8		rows;
	u16		count;
	short	data[16];

	rows	= (a_nlen + 15) / 16;
	count	= 0;

	printf("\r\n");
	printf("  00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F        ASCII\r\n");
	printf("  -------------------------------------------------------------------\r\n");

	for(i = 0; i < rows; i++)
    {
    	for(j = 0; j < 16; j++)
        {
        	if(count < a_nlen)
            {
            	data[j]    = (u8 )a_ppacket[count];
            	printf("%s%02X", (j & 0x07) ? " " : "  ", data[j]);
            }
        	else
            {
            	data[j]    = -1;
            	printf("%s  ", (j & 0x07) ? " " : "  ");
            }
        	count++;
        }
    	printf(" ");
    	for(j = 0; j < 16; j++)
        {
        	if(data[j] >= 0)
            {
            	printf("%s%c", (j & 0x07) ? "" : " ", isgraph((u8)data[j]) ? (u8)data[j] : '.');
            }
        	else
            {
            	printf("%s%c", (j & 0x07) ? "" : " ", ' ');
            }
        }
    	printf("\r\n");fflush(stdout);
    }
}
