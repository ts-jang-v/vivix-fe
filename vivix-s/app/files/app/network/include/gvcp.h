#ifndef _GVCP_H
#define _GVCP_H

extern "C" {

#include <stdint.h>
#include <stdbool.h>
#include <arpa/inet.h>		// socklen_t, inet_ntoa() ,ntohs(),htons()
#include "typedef.h"


#define GVCP_DATA_SIZE_MAX							512
#define GVCP_PORT									3956

#define GVBS_VERSION_OFFSET							0x00000000
#define GVBS_VERSION_MINOR_MASK						0x0000ffff
#define GVBS_VERSION_MINOR_POS						0
#define GVBS_VERSION_MAJOR_MASK						0xffff0000
#define GVBS_VERSION_MAJOR_POS						16

#define GVBS_DEVICE_MODE_OFFSET						0x00000004
#define GVBS_DEVICE_MODE_BIG_ENDIAN					1 << 31
#define GVBS_DEVICE_MODE_CHARACTER_SET_MASK			0x0000ffff
#define GVBS_DEVICE_MODE_CHARACTER_SET_POS			0

#define GVBS_DEVICE_MAC_ADDRESS_HIGH_OFFSET			0x00000008
#define GVBS_DEVICE_MAC_ADDRESS_LOW_OFFSET			0x0000000c

#define GVBS_SUPPORTED_IP_CONFIGURATION_OFFSET		0x00000010
#define GVBS_CURRENT_IP_CONFIGURATION_OFFSET		0x00000014
#define GVBS_IP_CONFIGURATION_PERSISTENT			1 << 0
#define GVBS_IP_CONFIGURATION_DHCP					1 << 1
#define GVBS_IP_CONFIGURATION_LLA					1 << 2

#define GVBS_CURRENT_IP_ADDRESS_OFFSET				0x00000024
#define GVBS_CURRENT_SUBNET_MASK_OFFSET				0x00000034
#define GVBS_CURRENT_GATEWAY_OFFSET					0x00000044

#define GVBS_MANUFACTURER_NAME_OFFSET				0x00000048
#define GVBS_MANUFACTURER_NAME_SIZE					32

#define GVBS_MODEL_NAME_OFFSET						0x00000068
#define GVBS_MODEL_NAME_SIZE						32

#define GVBS_DEVICE_VERSION_OFFSET					0x00000088
#define GVBS_DEVICE_VERSION_SIZE					32

#define GVBS_MANUFACTURER_INFORMATIONS_OFFSET		0x000000a8
#define GVBS_MANUFACTURER_INFORMATIONS_SIZE			48

#define GVBS_SERIAL_NUMBER_OFFSET					0x000000d8
#define GVBS_SERIAL_NUMBER_SIZE						16

#define GVBS_USER_DEFINED_NAME_OFFSET				0x000000e8
#define GVBS_USER_DEFINED_NAME_SIZE					16

#define GVBS_DISCOVERY_DATA_SIZE					0xf8

#define GVBS_XML_URL_0_OFFSET						0x00000200
#define GVBS_XML_URL_1_OFFSET						0x00000400
#define GVBS_XML_URL_SIZE							512

#define GVBS_N_NETWORK_INTERFACES_OFFSET			0x00000600

#define	GVBS_PERSISTENT_IP_ADDRESS_0_OFFSET			0x0000064c
#define	GVBS_PERSISTENT_SUBNET_MASK_0_OFFSET		0x0000065c
#define	GVBS_PERSISTENT_GATEWAY_0_OFFSET			0x0000066c

#define GVBS_N_MESSAGE_CHANNELS_OFFSET				0x00000900
#define GVBS_N_STREAM_CHANNELS_OFFSET				0x00000904

#define GVBS_GVCP_CAPABILITY_OFFSET					0x00000934
#define GVBS_GVCP_CAPABILITY_CONCATENATION			1 << 0
#define GVBS_GVCP_CAPABILITY_WRITE_MEMORY			1 << 1
#define GVBS_GVCP_CAPABILITY_PACKET_RESEND			1 << 2
#define GVBS_GVCP_CAPABILITY_EVENT					1 << 3
#define GVBS_GVCP_CAPABILITY_EVENT_DATA				1 << 4
#define GVBS_GVCP_CAPABILITY_SERIAL_NUMBER			1 << 30
#define GVBS_GVCP_CAPABILITY_NAME_REGISTER			1 << 31

#define GVBS_HEARTBEAT_TIMEOUT_OFFSET				0x00000938
#define GVBS_TIMESTAMP_TICK_FREQUENCY_HIGH_OFFSET	0x0000093c
#define GVBS_TIMESTAMP_TICK_FREQUENCY_LOW_OFFSET	0x00000940
#define GVBS_TIMESTAMP_CONTROL_OFFSET				0x00000944
#define GVBS_TIMESTAMP_LATCHED_VALUE_HIGH_OFFSET	0x00000948
#define GVBS_TIMESTAMP_LATCHED_VALUE_LOW_OFFSET		0x0000094c

#define GVBS_CONTROL_CHANNEL_PRIVILEGE_OFFSET		0x00000a00
#define GVBS_CONTROL_CHANNEL_PRIVILEGE_CONTROL		1 << 1
#define GVBS_CONTROL_CHANNEL_PRIVILEGE_EXCLUSIVE	1 << 0

#define GVBS_STREAM_CHANNEL_0_PORT_OFFSET			0x00000d00

#define GVBS_STREAM_CHANNEL_0_PACKET_SIZE_OFFSET	0x00000d04
#define GVBS_STREAM_CHANNEL_0_PACKET_SIZE_MASK		0x0000ffff
#define GVBS_STREAM_CHANNEL_0_PACKET_SIZE_POS		0
#define GVBS_STREAM_CHANNEL_0_PACKET_BIG_ENDIAN		1 << 29
#define GVBS_STREAM_CHANNEL_0_PACKET_DO_NOT_FRAGMENT	1 << 30
#define GVBS_STREAM_CHANNEL_0_PACKET_SIZE_FIRE_TEST		1 << 31

#define GVBS_STREAM_CHANNEL_0_PACKET_DELAY_OFFSET	0x00000d08
#define GVBS_STREAM_CHANNEL_0_IP_ADDRESS_OFFSET		0x00000d18
#define GVBS_DEVICE_LINK_SPEED_0_OFFSET				0x0000b000

#define GVBS_STREAM_CHANNEL_0_PACKET_SIZE_MIN_OFFSET				0x0000c000
#define GVBS_STREAM_CHANNEL_0_PACKET_SIZE_MAX_OFFSET				0x0000c004
#define GVBS_STREAM_CHANNEL_0_PACKET_DELAY_MIN_OFFSET				0x0000c008
#define GVBS_STREAM_CHANNEL_0_PACKET_DELAY_MAX_OFFSET				0x0000c00c
#define GVBS_STREAM_CHANNEL_0_FRAME_TRANSMISSION_DELAY_OFFSET		0x0000c010
#define GVBS_STREAM_CHANNEL_0_FRAME_TRANSMISSION_DELAY_MIN_OFFSET	0x0000c014
#define GVBS_STREAM_CHANNEL_0_FRAME_TRANSMISSION_DELAY_MAX_OFFSET	0x0000c018
#define GVBS_STREAM_CHANNEL_0_BANDWITDH_RESERVE_OFFSET				0x0000c01c
#define GVBS_STREAM_CHANNEL_0_BANDWITDH_RESERVE_MIN_OFFSET			0x0000c020
#define GVBS_STREAM_CHANNEL_0_BANDWITDH_RESERVE_MAX_OFFSET			0x0000c024
#define GVBS_STREAM_CHANNEL_0_BANDWITDH_RESERVE_ACCUMULATION_OFFSET	0x0000c028
#define GVBS_STREAM_CHANNEL_0_BANDWITDH_RESERVE_ACCUMULATION_MIN_OFFSET	0x0000c02c
#define GVBS_STREAM_CHANNEL_0_BANDWITDH_RESERVE_ACCUMULATION_MAX_OFFSET	0x0000c030
#define GVBS_STREAM_CHANNEL_0_THROUGHPUT_MAX_OFFSET					0x0000c100
#define GVBS_STREAM_CHANNEL_0_CURRENT_THOURGHPUT_OFFSET				0x0000c104
#define GVBS_STREAM_CHANNEL_0_ASSIGNED_BANDWIDTH_OFFSET				0x0000c108
#define GVBS_STREAM_CHANNEL_0_FRAME_JITTER_MAX_OFFSET				0x0000c10c

typedef enum 
{
	GVCP_PACKET_TYPE_ACK =			0x0000,
	GVCP_PACKET_TYPE_RESEND =		0x4200,
	GVCP_PACKET_TYPE_CMD = 			0x4201,
	GVCP_PACKET_TYPE_ERROR =		0x8006
} gvcp_packet_type_e;

typedef enum 
{
	GVCP_COMMAND_DISCOVERY_CMD =	0x0002,
	GVCP_COMMAND_DISCOVERY_ACK =	0x0003,
	GVCP_COMMAND_BYE_CMD = 			0x0004,
	GVCP_COMMAND_BYE_ACK = 			0x0005,
	GVCP_COMMAND_PACKET_RESEND_CMD =0x0040,
	GVCP_COMMAND_PACKET_RESEND_ACK =0x0041,
	GVCP_COMMAND_READ_REGISTER_CMD =0x0080,
	GVCP_COMMAND_READ_REGISTER_ACK =0x0081,
	GVCP_COMMAND_WRITE_REGISTER_CMD=0x0082,
	GVCP_COMMAND_WRITE_REGISTER_ACK=0x0083,
	GVCP_COMMAND_READ_MEMORY_CMD =	0x0084,
	GVCP_COMMAND_READ_MEMORY_ACK =	0x0085,
	GVCP_COMMAND_WRITE_MEMORY_CMD =	0x0086,
	GVCP_COMMAND_WRITE_MEMORY_ACK =	0x0087
} gvcp_command_e;

typedef struct 
{
    u32 address;
    u16 reserved;
    u16 count;
} __attribute__((__packed__)) read_mem_t;

typedef struct 
{
	u16 packet_type;
	u16 command;
	u16 size;
	u16 count;
}  __attribute__((__packed__)) gvcp_header_t;

typedef struct 
{
	gvcp_header_t header;
	u8 		*data;
} __attribute__((__packed__))  gvcp_packet_t;


typedef struct 
{
	u16 status;
	u16 answer;
	u16 length;
	u16 ack_id;
	u16 version_major;
	u16 version_minor;
	u32 device_mode;
	u16 reserved;
	u8	mac[6];
	u32	ip_config_option;
	u32 ip_config_current;
	u32 reserved1;
	u32 reserved2;
	u32 reserved3;
	u32 current_ip;
	u32 reserved4;
	u32 reserved5;
	u32 reserved6;
	u32 current_subnet;
	u32 reserved7;
	u32 reserved8;
	u32 reserved9;
	u32 default_gateway;
	u8	manufacture_name[32];
	u8	model_name[32];
	u8	device_version[32];
	u8	info[48];
	u8	serial[16];
	u8	name[16];
} __attribute__((__packed__)) discovery_ack_t;

gvcp_packet_t * gvcp_packet_new_read_register_ack (uint32_t value,uint32_t packet_count, size_t *packet_size);
gvcp_packet_t * gvcp_packet_new_read_register_cmd (uint32_t address, uint32_t packet_count, size_t *packet_size);
gvcp_packet_t * gvcp_packet_new_write_register_ack 	(uint32_t address,uint32_t packet_count, size_t *packet_size);
gvcp_packet_t * gvcp_packet_new_read_memory_ack (uint32_t address, uint32_t size, uint32_t packet_count, size_t *packet_size);
gvcp_packet_t * gvcp_packet_new_write_memory_ack (uint32_t address,uint32_t packet_count, size_t *packet_size);

}

#endif /* end of _GVCP_H */
